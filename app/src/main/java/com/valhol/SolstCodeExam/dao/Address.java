package com.valhol.SolstCodeExam.dao;

import com.valhol.SolstCodeExam.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ADDRESS".
 */
public class Address {

    private Long id;
    private String street;
    private String city;
    private String state;
    private String country;
    private String zip;
    private String latitude;
    private String longitude;
    private Long contactDetailId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AddressDao myDao;

    private ContactDetails contactDetails;
    private Long contactDetails__resolvedKey;


    public Address() {
    }

    public Address(Long id) {
        this.id = id;
    }

    public Address(Long id, String street, String city, String state, String country, String zip, String latitude, String longitude, Long contactDetailId) {
        this.id = id;
        this.street = street;
        this.city = city;
        this.state = state;
        this.country = country;
        this.zip = zip;
        this.latitude = latitude;
        this.longitude = longitude;
        this.contactDetailId = contactDetailId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAddressDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    public String getLatitude() {
        return latitude;
    }

    public void setLatitude(String latitude) {
        this.latitude = latitude;
    }

    public String getLongitude() {
        return longitude;
    }

    public void setLongitude(String longitude) {
        this.longitude = longitude;
    }

    public Long getContactDetailId() {
        return contactDetailId;
    }

    public void setContactDetailId(Long contactDetailId) {
        this.contactDetailId = contactDetailId;
    }

    /** To-one relationship, resolved on first access. */
    public ContactDetails getContactDetails() {
        Long __key = this.contactDetailId;
        if (contactDetails__resolvedKey == null || !contactDetails__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDetailsDao targetDao = daoSession.getContactDetailsDao();
            ContactDetails contactDetailsNew = targetDao.load(__key);
            synchronized (this) {
                contactDetails = contactDetailsNew;
            	contactDetails__resolvedKey = __key;
            }
        }
        return contactDetails;
    }

    public void setContactDetails(ContactDetails contactDetails) {
        synchronized (this) {
            this.contactDetails = contactDetails;
            contactDetailId = contactDetails == null ? null : contactDetails.getId();
            contactDetails__resolvedKey = contactDetailId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
