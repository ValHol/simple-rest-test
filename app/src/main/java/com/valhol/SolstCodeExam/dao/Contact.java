package com.valhol.SolstCodeExam.dao;

import com.valhol.SolstCodeExam.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTACT".
 */
public class Contact {

    private Long id;
    private String name;
    private Long employeeId;
    private String company;
    private String detailsURL;
    private String smallImageURL;
    private String birthdate;
    private Long phonesId;
    private Long contactDetailsId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactDao myDao;

    private Phone phone;
    private Long phone__resolvedKey;

    private ContactDetails contactDetails;
    private Long contactDetails__resolvedKey;


    public Contact() {
    }

    public Contact(Long id) {
        this.id = id;
    }

    public Contact(Long id, String name, Long employeeId, String company, String detailsURL, String smallImageURL, String birthdate, Long phonesId, Long contactDetailsId) {
        this.id = id;
        this.name = name;
        this.employeeId = employeeId;
        this.company = company;
        this.detailsURL = detailsURL;
        this.smallImageURL = smallImageURL;
        this.birthdate = birthdate;
        this.phonesId = phonesId;
        this.contactDetailsId = contactDetailsId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(Long employeeId) {
        this.employeeId = employeeId;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }

    public String getDetailsURL() {
        return detailsURL;
    }

    public void setDetailsURL(String detailsURL) {
        this.detailsURL = detailsURL;
    }

    public String getSmallImageURL() {
        return smallImageURL;
    }

    public void setSmallImageURL(String smallImageURL) {
        this.smallImageURL = smallImageURL;
    }

    public String getBirthdate() {
        return birthdate;
    }

    public void setBirthdate(String birthdate) {
        this.birthdate = birthdate;
    }

    public Long getPhonesId() {
        return phonesId;
    }

    public void setPhonesId(Long phonesId) {
        this.phonesId = phonesId;
    }

    public Long getContactDetailsId() {
        return contactDetailsId;
    }

    public void setContactDetailsId(Long contactDetailsId) {
        this.contactDetailsId = contactDetailsId;
    }

    /** To-one relationship, resolved on first access. */
    public Phone getPhone() {
        Long __key = this.phonesId;
        if (phone__resolvedKey == null || !phone__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhoneDao targetDao = daoSession.getPhoneDao();
            Phone phoneNew = targetDao.load(__key);
            synchronized (this) {
                phone = phoneNew;
            	phone__resolvedKey = __key;
            }
        }
        return phone;
    }

    public void setPhone(Phone phone) {
        synchronized (this) {
            this.phone = phone;
            phonesId = phone == null ? null : phone.getId();
            phone__resolvedKey = phonesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ContactDetails getContactDetails() {
        Long __key = this.contactDetailsId;
        if (contactDetails__resolvedKey == null || !contactDetails__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDetailsDao targetDao = daoSession.getContactDetailsDao();
            ContactDetails contactDetailsNew = targetDao.load(__key);
            synchronized (this) {
                contactDetails = contactDetailsNew;
            	contactDetails__resolvedKey = __key;
            }
        }
        return contactDetails;
    }

    public void setContactDetails(ContactDetails contactDetails) {
        synchronized (this) {
            this.contactDetails = contactDetails;
            contactDetailsId = contactDetails == null ? null : contactDetails.getId();
            contactDetails__resolvedKey = contactDetailsId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
